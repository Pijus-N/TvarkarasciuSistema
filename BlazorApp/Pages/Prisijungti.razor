@page "/prisijungti"
@using BlazorServer.Models
@using BlazorServer.Authentication
@using System.Data
@using MySqlConnector
@using Dapper
@inject IJSRuntime js
@inject IConfiguration _config
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject Blazored.SessionStorage.ISessionStorageService _currentSession

<PageTitle>Prisijungti</PageTitle>
<h1>Prisijungti</h1>

el. Paštas
<input @bind="model.elPastas" type="text" class="form-control" id="name"/>
Slaptažodis
<input @bind="model.slaptazodis" type="password" class="form-control" id="name"/>

<div class="form-check">
      <input type="checkbox" class="form-check-input" id="dropdownCheck">
      Prisiminti mane
</div>
<a class="btn btn-primary" disabled="@loading" role="button" @onclick="Authenticate">
    @if (loading) 
    {
        <span class="spinner-border spinner-border-sm mr-1"></span>
    }
    Prisijungti
</a>


@code {
    private Naudotojas model = new Naudotojas();
    private Naudotojas naudotojas = new Naudotojas();

    bool loading = false;

    // logs a user in.
    // 
    private async Task Authenticate()
    {
        loading = true;

        // check if user exists in database
        string sql = "select * from naudotojai where elPastas = @elPastas AND slaptazodis = @slaptazodis limit 1";

        List<Naudotojas> rastiNaudotojai;
        string connstring = _config.GetConnectionString("default");
        using (IDbConnection connection = new MySqlConnection(connstring))
        {
            var rows = await connection.QueryAsync<Naudotojas>(sql, new { 
                @elPastas = model.elPastas, 
                @slaptazodis = model.slaptazodis 
            });
            rastiNaudotojai = rows.ToList();
        }

        if (rastiNaudotojai.Count() < 1)       // if no users were found gives an alert
        {
            await js.InvokeVoidAsync("alert", "Neteisingi prisijungimo duomenys");
            loading = false;
            return;
        }
        naudotojas = rastiNaudotojai.First();

        // update the session
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            Name = naudotojas.vardas,
            Role = naudotojas.role
        });
        SetSessionUser(naudotojas);

        // redirect
        switch(naudotojas.role)
        {
            case "administratorius":
                navManager.NavigateTo("/", true);
                break;
            default:
                navManager.NavigateTo("/", true);
                break;
        }
    }

    public void SetSessionUser(Naudotojas naudotojas)
    {
        var user = new UserAccount();
        user.Id = naudotojas.id;
        user.UserName = naudotojas.vardas;
        user.Password = naudotojas.slaptazodis;
        user.Role = naudotojas.role;

        _currentSession.SetItemAsync("SessionUser", user);
    }
}





