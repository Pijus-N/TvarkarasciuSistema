@page "/register"
@using BlazorServer.Models
@using System.Data
@using MySqlConnector
@using Dapper
@inject IJSRuntime js
@inject IConfiguration _config
@inject NavigationManager navManager

<PageTitle>Registration</PageTitle>
<h1>Create new account</h1>

<EditForm Model="@model" OnValidSubmit="@RegisterUser" OnInvalidSubmit="@InvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary/>
    <div class="form-group">
        <label>Name</label>
        <InputText @bind-Value="model.name" class="form-control" />
    </div>
    <div class="form-group">
        <label>Last Name</label>
        <InputText @bind-Value="model.lastname" class="form-control" />
    </div>
    <div class="form-group">
        <label>Email</label>
        <InputText @bind-Value="model.email" class="form-control" />
    </div>
    <div class="form-group">
        <label>Password</label>
        <InputText @bind-Value="model.password" class="form-control" />
    </div>
    <div class="form-group">
        <label>Birth date</label>
        <InputDate @bind-Value="model.birthdate" class="form-control" />
    </div>
    <div>
        <label>Role</label>
        <InputSelect @bind-Value="model.role" class="form-select" required="required">
            <option value="">select role (temporary)</option>
            <option value="teacher">teacher</option>
            <option value="student">student</option>
            <option value="guardian">guardian</option>
            <option value="administrator">administrator</option>
        </InputSelect>
    </div>
    @if (model.role == "teacher")
    {
        <br>
        <h3>Teacher information (optional)</h3>
        <div>
            <label>Instrument</label>
            <input @bind-value="teacher_instrument" class="form-control"/>
        </div>
        <div>
            <label>Location</label>
            <input @bind-value="teacher_location" class="form-control"/>
        </div>
        <div>
            <label>Price</label> <!-- add data validation later -->
            <input @bind-value="teacher_price" class="form-control"/>
        </div>
        <div>
            <label>Group_Price</label> <!-- add data validation later -->
            <input @bind-value="teacher_group_price" class="form-control"/>
        </div>
    }
    
    
    <br>
    <button disabled="@loading" class="btn btn-primary" type="submit">
        @if (loading) 
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Register
    </button>
</EditForm>


@code {
    bool loading = false;
    private User model = new User();

    string teacher_instrument, teacher_location, teacher_price, teacher_group_price = "";

    // makes a user in the database
    // does not check if there is a user registered with that email.
    private async Task RegisterUser() 
    {
        loading = true;     // silly button effect to show that something is happening
        string query = "INSERT INTO users (name, lastname, email, password, birthdate, role) VALUES('"
            + model.name + "','"
            + model.lastname+ "','"
            + model.email + "','"
            + model.password + "','"
            + model.birthdate + "','"
            + model.role + "');";
        SqlSaveData(query);

        switch(model.role)
        {
            case "teacher":
                CreateTeacher();
                break;
            case "student":
                CreateStudent();
                break;
            case "guardian":
                CreateGuardian();
                break;
            default:
                break;
        }

        loading = false;
        await js.InvokeVoidAsync("alert", "Registration successful");
        navManager.NavigateTo("/login", true);
    }

    private async Task InvalidSubmit()
    {
        await js.InvokeVoidAsync("alert", "Invalid registration data. Please try again.");
    }

    public async void CreateTeacher()
    {
        string query = "SELECT * FROM users WHERE (email, password) = (SELECT '" + model.email + "','" + model.password + "') LIMIT 1";
        List<User> user = await SqlLoadData<User>(query);

        query = "INSERT INTO teachers (instrument, location, price, group_price, user_id) VALUES('"
            + teacher_instrument + "','"
            + teacher_location + "','"
            + teacher_price + "','"
            + teacher_group_price + "','"
            + user[0].id + "');";
        await SqlSaveData(query);
        Console.WriteLine("Teacher inserted.");
    }

    public async void CreateStudent()
    {
        string query = "SELECT * FROM users WHERE (email, password) = (SELECT '" + model.email + "','" + model.password + "') LIMIT 1";
        List<User> user = await SqlLoadData<User>(query);
        query = "INSERT INTO students (user_id) VALUES('"
            + user[0].id + "');";
        await SqlSaveData(query);
        Console.WriteLine("Student inserted.");
    }

    public async void CreateGuardian()
    {
        // later
    }

    public async Task SqlSaveData(string query)
    {
        string connstring = _config.GetConnectionString("default");
        using (IDbConnection connection = new MySqlConnection(connstring))
        {
            await connection.ExecuteAsync(query, new { });
        }
    }

    public async Task<List<T>> SqlLoadData<T>(string query)
    {
        string connstring = _config.GetConnectionString("default");
        using (IDbConnection connection = new MySqlConnection(connstring))
        {
            var rows = await connection.QueryAsync<T>(query, new { });
            return rows.ToList();
        }
    }
}





