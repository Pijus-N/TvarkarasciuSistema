@page "/details/{myvalue}"
@using BlazorServer.Models
@using BlazorServer.Authentication
@using System.Data
@using MySqlConnector
@using Dapper
@inject IJSRuntime js
@inject IConfiguration _config
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject Blazored.SessionStorage.ISessionStorageService _currentSession

<PageTitle>lessons informacija</PageTitle>
<h1>lessons informacija</h1>
@if (dataLoaded)
{
    string date = model.start_time.ToShortDateString();
    <EditForm Model="@model">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <div class="form-group">
            <label>Date</label>
            <InputText disabled="true" @bind-Value="date" class="form-control" />
        </div>
        <div class="form-group">
            <label>Location</label>
            <InputText disabled="true" @bind-Value="model.location" class="form-control" />
        </div>
        <div class="form-group">
            <label>Instrument</label>
            <InputText disabled="true" @bind-Value="model.instrument" class="form-control" />
        </div>
        <div class="form-group">
            <label>Price</label>
            <InputNumber disabled="true" @bind-Value="model.price" class="form-control" />
        </div>
        <div class="form-group">
            <label>Student Count</label>
            <InputNumber disabled="true" @bind-Value="model.student_count" class="form-control" />
        </div>
        <div>
            <label>Lesson Type</label>
            <InputText disabled="true" @bind-Value="model.lesson_type" class="form-control" />
        </div><br>
        @if(model.start_time > DateTime.Now)
        {
            @if(!registered)
            {
                <button disabled="@loading" class="btn btn-primary" type="button" @onclick="Register">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Register
                </button>
            }
            else
            {
                <button disabled="@loading" class="btn btn-danger" type="button" @onclick="UnRegister">
                    @if (loading)
                    {
                        <span class="spinner-border spinner-border-sm mr-1"></span>
                    }
                    Cancel Registration
                </button>
            }
        }
    </EditForm>

}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}



@code {
    [Parameter]
    public string myvalue { get; set; }
    public string lessonDate { get; set; }
    public string time { get; set; }
    public int student_id { get; set; }

    bool loading = false;

    bool registered = false;
    bool dataLoaded = false;

    private Lesson model = new Lesson();


    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();


        //the param will be set now
        var test = myvalue;

        await ReadDbData(myvalue);
    }

    protected override void OnInitialized()
    {

    }

    private async Task Register()
    {
        var user = await _currentSession.GetItemAsync<UserAccount>("SessionUser");
        string connstring = _config.GetConnectionString("default");
        using (MySqlConnection connection = new MySqlConnection(connstring))
        {
            connection.Open();

            //use student_id and lesson_id to add new entry to registrations
            string query = "INSERT INTO `registrations` (`student_id`, `lesson_id`) VALUES (@student, @lesson)";
            using (MySqlCommand command = new MySqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@student", student_id);
                command.Parameters.AddWithValue("@lesson", myvalue);

                command.ExecuteNonQuery();
            }
        }
        navManager.NavigateTo("/response/registered");
    }

    private async Task UnRegister()
    {
        var user = await _currentSession.GetItemAsync<UserAccount>("SessionUser");
        string connstring = _config.GetConnectionString("default");
        using (MySqlConnection connection = new MySqlConnection(connstring))
        {
            connection.Open();

            //use student_id and lesson_id to find an entry in registrations and delete it
            string query = "DELETE FROM `registrations` WHERE student_id = " + student_id.ToString()+" AND lesson_id = "+ myvalue;
            using (MySqlCommand command = new MySqlCommand(query, connection))
            {
                command.ExecuteNonQuery();
            }
        }
        navManager.NavigateTo("/response/unregistered");
    }

    async Task ReadDbData(string id)
    {

        var user = await _currentSession.GetItemAsync<UserAccount>("SessionUser");
        string connstring = _config.GetConnectionString("default");
        using (MySqlConnection connection = new MySqlConnection(connstring))
        {
            connection.Open();
            string query;

            if(user.Role == "student")
            {
                //get student_id using user_id
                query = "SELECT id FROM students WHERE user_id = " + user.Id.ToString() + " LIMIT 1";
                using (MySqlCommand command = new MySqlCommand(query, connection))
                {
                    using (MySqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            student_id = reader.GetInt32(0);
                        }
                    }
                }
            }
            else if(user.Role == "guardian")
            {
                //get student_id using user_id
                query = "SELECT student_id FROM guardians WHERE user_id = " + user.Id.ToString() + " LIMIT 1";
                using (MySqlCommand command = new MySqlCommand(query, connection))
                {
                    using (MySqlDataReader reader = command.ExecuteReader())
                    {
                        while (reader.Read())
                        {
                            student_id = reader.GetInt32(0);
                        }
                    }
                }
            }


            //use student_id and lesson_id to check if registered already
            query = "SELECT * FROM `registrations` WHERE student_id = " + student_id.ToString() + " AND lesson_id = " + myvalue;
            using (MySqlCommand command = new MySqlCommand(query, connection))
            {
                using (MySqlDataReader reader = command.ExecuteReader())
                {
                    registered = reader.HasRows;
                }
            }
        }

        // check if user exists in database
        string sql = "select * from lessons where id=@id limit 1";

        // this thing should be a function somewhere
        using (IDbConnection connection = new MySqlConnection(connstring))
        {
            var rows = await connection.QueryAsync<Lesson>(sql, new { id });
            model = rows.First();
        }
        dataLoaded = true;
    }

}