@page "/counter/{myvalue}"
@using BlazorServer.Models
@using BlazorServer.Authentication
@using System.Data
@using MySqlConnector
@using Dapper
@inject IJSRuntime js
@inject IConfiguration _config
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject Blazored.SessionStorage.ISessionStorageService _currentSession


<p id="date-time"></p>
<PageTitle>Timetable</PageTitle>

<div class="month">
    <ul>
        <li @onclick="@(() => LoadPreviousWeek())" class="prev">&#10094;</li>
        <li @onclick="@(() => LoadNextWeek())" class="next">&#10095;</li>
        <li><span style="font-size:18px">@GetYearInterval()</span><br>@GetMonthInterval()<br><span
                style="font-size:14px">@GetDaysInterval()</span></li>
    </ul>
</div>



<table class="table">
    <thead>
        <tr>
            <th>Monday</th>
            <th>Tuesday</th>
            <th>Wednesday</th>
            <th>Thursday</th>
            <th>Friday</th>
            <th>Saturday</th>

        </tr>
    </thead>
    <tbody>
        @if (dataLoaded)
        {
            @for (int i = 0; i < week.daySlots[0].timesList.Count; i++)
            {
                <tr>
                    @for (int j = 0; j < 6; j++)
                    {
                        var day = week.daySlots[j].timesList[i];
                        if (@user.Role == "teacher")
                        {
                            if (@day.info != null)
                            {
                                <td><a href="editlesson/@day.id.ToString()">@day.ToString()</a>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <a href="addnewlesson/@day.FullToString()">@day.ToString()</a>
                                </td>

                            }
                        }
                        else
                        {
                            if (@day.info != null)
                            {
                                <td>
                                    <a href="details/@day.id.ToString()">@day.ToString()</a>
                                </td>
                            }
                            else
                            {
                                <td>
                                    <a style="color: red" href="">@day.ToString()</a>
                                </td>

                            }

                        }
                    }
                </tr>
            }
        }
        else
        {
            <div class="spinner-border" role="status">
                <span class="sr-only">Loading...</span>
            </div>
        }

    </tbody>
</table>




@code {
    [Parameter]
    public string myvalue { get; set; }
    private List<Lesson> allLessons = new List<Lesson>();
    private bool dataLoaded = false;

    public UserAccount user = new UserAccount();
    public List<User> person;

    DateTime currentViewingWeek { get; set; }
    public class TimeSlot
    {
        public int time;
        public string fullDate;
        public string info;
        public int id;

        public TimeSlot(int time, string fullDate)
        {
            this.time = time;
            this.fullDate = fullDate;

        }

        public TimeSlot()
        {

        }

        public override string ToString()
        {
            if (info != null)
            {
                return time.ToString() + ":00 " + info;
            }

            return time.ToString() + ":00";
        }
        public string FullToString()
        {
            return fullDate.Replace('/','-') + '-' + time.ToString();
        }



    }
    public class DaySlot
    {
        public List<TimeSlot> timesList = new List<TimeSlot>();


        public DaySlot()
        {
            timesList = new List<TimeSlot>();
        }
        public void AddTimeSlot(TimeSlot timeSlot)
        {
            this.timesList.Add(timeSlot);
        }
    }
    public class Week
    {
        public List<DaySlot> daySlots = new List<DaySlot>();
        public void AddDaySlot(DaySlot daySlot)
        {
            this.daySlots.Add(daySlot);
        }



        public Week()
        {
            daySlots = new List<DaySlot>();

        }
    }
    private int currentCount = 0;
    Week week = new Week();

    DateTime localDate;
    private string _displaydate;
    string monthName;
    string year;
    TimeSlot timetest;



    protected override async Task OnInitializedAsync()
    {

        await ReadDbData();
        try
        {
            await GetSessionUser();
        }
        catch 
        {
            // Ignore
        }

        Console.WriteLine(user.Id);
        _displaydate = DateTime.Now.ToString("U");
        localDate = DateTime.Now;
        string temp = DateTime.Now.Month.ToString();

        monthName = DateTime.Now.Month.ToString();
        year = DateTime.Now.Year.ToString();

        while (localDate.DayOfWeek.ToString() != "Monday")
        {

            localDate = localDate.AddDays(-1);
        }
        currentViewingWeek = localDate;
        for (int i = 0; i < 7; i++)
        {
            DaySlot dayslot = new DaySlot();
            for (int j = 8; j < 18; j++)
            {
                string currentDate = localDate.ToShortDateString();
                TimeSlot timeslot = new TimeSlot(j, currentDate);

                foreach (Lesson Lesson in allLessons)
                {

                    if (localDate.Date == Lesson.start_time.Date)
                    {
                        if (Lesson.start_time.Hour == j)
                        {
                            timeslot.info = Lesson.instrument + " " + Lesson.lesson_type;
                            timeslot.id = Lesson.id;
                            break;
                        }
                    }
                }
                dayslot.AddTimeSlot(timeslot);

            }

            localDate = localDate.AddDays(1);
            week.AddDaySlot(dayslot);

        }
        dataLoaded = true;
        StateHasChanged();
    }
    void LoadNextWeek()
    {
        currentViewingWeek = currentViewingWeek.AddDays(7);
        LoadWeek();
    }
    void LoadPreviousWeek()
    {
        currentViewingWeek = currentViewingWeek.AddDays(-7);
        LoadWeek();
    }


    void LoadWeek()
    {
        week = new Week();
        StateHasChanged();
        dataLoaded = false;
        StateHasChanged();
        _displaydate = currentViewingWeek.ToString("U");
        localDate = currentViewingWeek;


        monthName = DateTime.Now.Month.ToString();
        year = DateTime.Now.Year.ToString();

        while (localDate.DayOfWeek.ToString() != "Monday")
        {

            localDate = localDate.AddDays(-1);
        }

        for (int i = 0; i < 7; i++)
        {
            DaySlot dayslot = new DaySlot();
            for (int j = 8; j < 18; j++)
            {
                string currentDate = localDate.ToShortDateString();
                TimeSlot timeslot = new TimeSlot(j, currentDate);

                foreach (Lesson Lesson in allLessons)
                {

                    if (localDate.Date == Lesson.start_time.Date)
                    {
                        if (Lesson.start_time.Hour == j)
                        {
                            timeslot.info = Lesson.instrument + " " + Lesson.lesson_type;
                            timeslot.id = Lesson.id;
                            break;
                        }
                    }
                }
                dayslot.AddTimeSlot(timeslot);

            }

            localDate = localDate.AddDays(1);
            week.AddDaySlot(dayslot);

        }
        dataLoaded = true;
        StateHasChanged();

    }

    string GetDaysInterval()
    {
        return currentViewingWeek.Day + " - " + currentViewingWeek.AddDays(7).Day;

    }

    string GetYearInterval()
    {
        return currentViewingWeek.Year.ToString();

    }

    string GetMonthInterval()
    {
        return currentViewingWeek.Month.ToString();

    }

    public async Task GetSessionUser()
    {

        

        try
        {
            user = await _currentSession.GetItemAsync<UserAccount>("SessionUser");
        }
        catch (JSDisconnectedException ex)
        {
            // Ignore
        }

    }


    async Task ReadDbData()
    {


        // check if user exists in database
        string sql = "select * from lessons";
        // this thing should be a function somewhere
        string connstring = _config.GetConnectionString("default");
        using (IDbConnection connection = new MySqlConnection(connstring))
        {
            var rows = await connection.QueryAsync<Lesson>(sql);
            rows = rows.ToList();

            foreach (var row in rows)
            {
                Lesson Lesson = row;
                //Console.WriteLine("Data");
                //Console.WriteLine(Lesson.date);
                //Console.WriteLine(DateTime.Parse(Lesson.date.Split(' ')[0]));
                allLessons.Add(Lesson);
                //Console.WriteLine(allLessons.Count);


            }




        }



    }

}




