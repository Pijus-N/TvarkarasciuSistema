@page "/counter"
@using BlazorServer.Models
@using BlazorServer.Authentication
@using System.Data
@using MySqlConnector
@using Dapper
@inject IJSRuntime js
@inject IConfiguration _config
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject Blazored.SessionStorage.ISessionStorageService _currentSession
 
<p id="date-time"></p> 
<PageTitle>Timetable</PageTitle>

<div class="month">
  <ul>
    <li class="prev">&#10094;</li>
    <li class="next">&#10095;</li>
    <li>@monthName<br><span style="font-size:18px">@year</span></li>
  </ul>
</div>



<table class="table">
        <thead>
            <tr>
                <th>Monday</th>
                <th>Tuesday</th>
                <th>Wednesday</th>
                <th>Thursday</th>
                <th>Friday</th>
                <th>Saturday</th>
                
            </tr>
        </thead>
        <tbody>
            @if (dataLoaded)
            {
                @for (int i=0; i<week.daySlots[0].timesList.Count; i++)
            {
                <tr>
                    @for(int j=0; j<6; j++){
                    <td><a href="addnewlesson/@week.daySlots[j].timesList[i].FullToString()">@week.daySlots[j].timesList[i].ToString()</a></td>
                    }
                </tr>
            }
            }
            else
            {
                <div class="spinner-border" role="status">
                    <span class="sr-only">Loading...</span>
                </div>
            }
            
        </tbody>
    </table>

<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>


@code {
    private List<Pamoka> allLessons = new List<Pamoka>();
    private bool dataLoaded = false;
    public class TimeSlot{
        public int time;
        public string fullDate;
        public string info;

        public TimeSlot(int time,string fullDate){
            this.time = time;
            this.fullDate = fullDate;

        }

        public TimeSlot(){

        }

        public override string ToString()
        {
            if(info!=null){
                return time.ToString()+":00 "+info;
            }

            return time.ToString()+":00";
        }
        public string FullToString()
        {
            return fullDate+'-'+ time.ToString();
        }

    

    }
    public class DaySlot{
        public List<TimeSlot> timesList = new List<TimeSlot>();

       
        public DaySlot(){
            timesList = new List<TimeSlot>();
        }
        public void AddTimeSlot(TimeSlot timeSlot){
           this.timesList.Add(timeSlot);
        }
    }
    public class Week{
        public List<DaySlot> daySlots = new List<DaySlot>();
        public void AddDaySlot(DaySlot daySlot){
           this.daySlots.Add(daySlot);
        }

      
    
    public Week(){
        daySlots = new List<DaySlot>();

    }
    }
    private int currentCount = 0;
    Week week = new Week();

    DateTime localDate ;
    private string _displaydate;
    string monthName;
    string year;
    TimeSlot timetest;
    
    private void IncrementCount()
    {
        Console.WriteLine(localDate);
        currentCount++;
    }

        protected override async Task OnInitializedAsync()
        {
           await ReadDbData();
           _displaydate = DateTime.Now.ToString("U");
           localDate = DateTime.Now;
           string temp = DateTime.Now.Month.ToString();

           monthName= DateTime.Now.Month.ToString();
           year = DateTime.Now.Year.ToString();

          while(localDate.DayOfWeek.ToString()!="Monday"){

            localDate =localDate.AddDays(-1);
          }

          for(int i=0; i<7; i++){
            DaySlot dayslot = new DaySlot();
            for(int j=8; j<18; j++){
                string currentDate = localDate.Year.ToString()+'-'+localDate.Month.ToString()+'-'+localDate.Day.ToString();
                TimeSlot timeslot = new TimeSlot(j,currentDate);

                foreach(Pamoka pamoka in allLessons) {
                    if(localDate.ToString("MM/dd/yyyy")==pamoka.dateInFormat.ToShortDateString()){
                        if(pamoka.time==j){
                        timeslot.info = pamoka.instrument+" "+pamoka.type;
                        break;
                        }
                    }
                }
                dayslot.AddTimeSlot(timeslot);
                
                
                
                



            }
            
            localDate = localDate.AddDays(1);
            week.AddDaySlot(dayslot);
            
        }
            dataLoaded = true;
    }


    async Task ReadDbData()
    {
        

        // check if user exists in database
        string sql = "select * from pamokos";
        // this thing should be a function somewhere
        string connstring = _config.GetConnectionString("default");
            using (IDbConnection connection = new MySqlConnection(connstring))
            {
                var rows = await connection.QueryAsync<Pamoka>(sql);
                rows = rows.ToList();
                
                foreach(var row in rows){
                    Pamoka pamoka = row;
                    pamoka.dateInFormat = DateTime.Parse(pamoka.date);
                    allLessons.Add(pamoka);
                    Console.WriteLine(allLessons.Count);
                    

                }
                
                

                
            }
        
  

    }
        
      



   
}
}




