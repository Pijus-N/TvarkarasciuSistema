@page "/userslist/{lessonid:int}"
@inject NavigationManager navManager
@using BlazorServer.Authentication
@inject Blazored.SessionStorage.ISessionStorageService _currentSession
@using BlazorServer.Models
@using MySqlConnector
@using Dapper
@using System.Data
@inject IConfiguration _config
@attribute [Authorize(Roles = "teacher")]
@inject IJSRuntime js

<CascadingAuthenticationState>
<AuthorizeView Roles="teacher">
<Authorized>

<PageTitle>Lesson List</PageTitle>
<h1>Lesson List</h1>
@lessonId
@if (loadingdata == true)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">Name</th>
                <th scope="col">Grade</th>
                <th scope="col">Attendance</th>
                <th scope="col">Note</th>
            </tr>
        </thead>
        <tbody>
            @{ int i = 0; }
            @foreach (User student in students)
            {
                bool hasAssessment = assessments.Any(a => a.student_id == studentIds[i]);
                int index = 0;
                if(hasAssessment) { index = assessments.FindIndex(a => a.student_id == studentIds[i]); }        
                else
                {
                    assessments.Add(new Assessment());
                    index = assessments.Count() - 1;
                    assessments[index].student_id = studentIds[i];
                    assessments[index].lesson_id = -1; // -1 so i can tell if an assessment needs to be added or updated
                    assessments[index].Grade = -1; // -1 basically means null, because you cant actually set an int to null ?
                }


                <tr>
                    <th scope="row">@(i+1)</th>
                    <td>@student.name @student.lastname</td>
                    <td>
                        <select class="form-select" @bind="assessments[index].Grade">
                            <option value="@(assessments[index].Grade != -1 ? assessments[index].Grade : "-1")">@(assessments[index].Grade != -1 ? assessments[index].Grade.ToString() : "No grade")</option>

                            @for (int j = 10; j >= 1; j--) { <option value="@j">@j</option> }
                            <option value="-1">No grade</option>
                        </select>
                    </td>
                    <td>
                        <input type="checkbox" @bind="assessments[index].Attendance">
                    </td>
                    <td><textarea @bind="assessments[index].Note" maxlength="200"></textarea></td>
                </tr>
                i++;
            }
        </tbody>    
    </table>
}
<a class="btn btn-secondary" href="lessonlist" role="button">Back</a>
<a class="btn btn-primary" role="button" disabled="@loading" @onclick="SaveData">
    @if (loading) 
    {
        <span class="spinner-border spinner-border-sm mr-1"></span>
    }
    Save
</a>

@code {
    bool loadingdata = true;
    bool loading = false;
    [Parameter] public int lessonId { get; set; }
    List<int> studentIds = new List<int>();
    List<User> students = new List<User>();



    List<Assessment> assessments = new List<Assessment>();

    protected override async Task OnInitializedAsync()
    {
        string query = $"SELECT * FROM assessments WHERE lesson_id = {lessonId}";
        assessments = await SqlLoadData<Assessment>(query);

        query = "SELECT student_id FROM registrations WHERE (lesson_id) = (SELECT '" + lessonId + "')";
        studentIds = await SqlLoadData<int>(query);

        foreach(int student_id in studentIds)
        {
            query = "SELECT * FROM students WHERE (id) = (SELECT '" + student_id + "') LIMIT 1"; // fetch user id
            List<Student> student = await SqlLoadData<Student>(query);

            query = "SELECT * FROM users WHERE (id) = (SELECT '" + student.First().user_id + "') LIMIT 1"; // fetch user
            List<User> user = await SqlLoadData<User>(query);

            students.Add(user.First()); // add to list         
        }

        loadingdata = false;
    }

    private async Task SaveData()
    {
        foreach (Assessment assessment in assessments)
        {
            if (assessment.lesson_id != -1)
            {
                string query = $"UPDATE assessments SET grade = {assessment.Grade}, attendance = {assessment.Attendance}, note = '{assessment.Note}' " +
                           $"WHERE id = {assessment.Id}";
                await SqlSaveData(query);
            }
            else
            {
                int attendance = 0;
                if (assessment.Attendance) { attendance = 1; } // workaround because otherwise assessment.Attendance always gives 0
                string query = "INSERT INTO assessments (grade, note, praise, attendance, lesson_id, student_id) VALUES('"
                    + assessment.Grade + "','"  //grade
                    + assessment.Note + "','"   //note
                    + null + "','"              //praise(should be deleted honestly, im just gonna always set this to null)
                    + attendance + "','"        //attendance
                    + lessonId + "','"          //lesson_id
                    + assessment.student_id + "');"; //student_id
                await SqlSaveData(query);
            }
        }
        await js.InvokeVoidAsync("alert", "Grades updated!");
    }

    public async Task SqlSaveData(string query)
    {
        string connstring = _config.GetConnectionString("default");
        using (IDbConnection connection = new MySqlConnection(connstring))
        {
            await connection.ExecuteAsync(query, new { });
        }
    }

    public async Task<List<T>> SqlLoadData<T>(string query)
    {
        string connstring = _config.GetConnectionString("default");
        using (IDbConnection connection = new MySqlConnection(connstring))
        {
            var rows = await connection.QueryAsync<T>(query, new { });
            return rows.ToList();
        }
    }
}

</Authorized>
<NotAuthorized>
    Sorry, there's nothing at this address.
</NotAuthorized>
</AuthorizeView>
</CascadingAuthenticationState>