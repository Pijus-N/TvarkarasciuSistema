@page "/addnewlesson/{myvalue}"
@using BlazorServer.Models
@using BlazorServer.Authentication
@using System.Data
@using MySqlConnector
@using Dapper
@inject IJSRuntime js
@inject IConfiguration _config
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject Blazored.SessionStorage.ISessionStorageService _currentSession
 
<PageTitle>Pamokos sukūrimas</PageTitle>
<h1>Pamokos sukūrimas</h1>

<EditForm Model="@model" OnValidSubmit="@AddNewLessons" OnInvalidSubmit="@InvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary/>
    <div class="form-group">
        <label>Data</label>
        <InputText disabled="true" @bind-Value="model.date" class="form-control" />
    </div>
    <div class="form-group">
        <label>Vieta</label>
        <InputText @bind-Value="model.place" class="form-control" />
    </div>
    <div class="form-group">
        <label>Instrumentas</label>
        <InputText @bind-Value="model.instrument" class="form-control" />
    </div>
    <div class="form-group">
        <label>Kaina</label>
        <InputText @bind-Value="model.price" class="form-control" />
    </div>
    <div class="form-group">
        <label>Mokiniu skaičius</label>
        <InputText @bind-Value="model.students_count" class="form-control" />
    </div>
    <div>
        <label>Pamokos tipas</label>
        <InputSelect @bind-Value="model.type" class="form-select" required="required">
            <option value="">Pasirinkite pamokos tipą</option>
            <option value="Gyva">Gyva</option>
            <option value="Nuotolinė">Nuotolinė</option>

        </InputSelect>
    </div><br>
    <button disabled="@loading" class="btn btn-primary" type="submit">
        @if (loading) 
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Registruotis
    </button>
</EditForm>


@code {
    [Parameter]
    public string myvalue{ get; set; }
    public string lessonDate{ get; set; }
    public string time{ get; set; }
    bool loading = false;
    public UserAccount user = new UserAccount();



    private Pamoka model = new Pamoka();

    // makes a user in the database
    // does not check if there is a user registered with that email.
    private async Task AddNewLessons() 
    {
        loading = true;     // silly button effect to show that something is happening

        string sql = "INSERT INTO pamokos (teacher_id,date,place,time, price, instrument, students_count, type) VALUES('"
        + user.Id + "','"
        + lessonDate + "','"
        + model.place + "','"
        + time + "','"
        + model.price + "','"
        + model.instrument + "','"
        + model.students_count + "','"
        + model.type + "');";

        // this thing should be a function somewhere
        string connstring = _config.GetConnectionString("default");         // the "default" connection string is located in appsettings.json
        using (IDbConnection connection = new MySqlConnection(connstring))  // connect to db using MySqlConnector
        {
            await connection.ExecuteAsync(sql, new { });
        }

        loading = false;
        await js.InvokeVoidAsync("alert", "Pamoka pridėta");
        navManager.NavigateTo("/counter/show", true);
    }
    protected override void OnParametersSet()
{
    //the param will be set now
    var test = myvalue;


}

    private async Task InvalidSubmit()
    {
        await js.InvokeVoidAsync("alert", "Neteisingi duomenys!");
    }

    protected override void OnInitialized()
        {
            GetSessionUser();
            string[] allChars = myvalue.Split('-');
            lessonDate = allChars[0]+'-'+allChars[1]+'-'+allChars[2];
            time =allChars[3];
            model.date = lessonDate +' '+ time+ ":00";
        }
        public async Task GetSessionUser()
    {

        user = await _currentSession.GetItemAsync<UserAccount>("SessionUser");

    }

}