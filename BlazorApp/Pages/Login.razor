@page "/login"
@using BlazorServer.Models
@using BlazorServer.Authentication
@using System.Data
@using MySqlConnector
@using Dapper
@inject IJSRuntime js
@inject IConfiguration _config
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject Blazored.SessionStorage.ISessionStorageService _currentSession

<PageTitle>Log In</PageTitle>
<h1>Log In</h1>

Email
<input @bind="model.email" type="text" class="form-control" id="name"/>
Password
<input @bind="model.password" type="password" class="form-control" id="name"/>

<a href="forgot_password">Forgot your password? Click here.</a><br />
<a class="btn btn-primary" disabled="@loading" role="button" @onclick="Authenticate">
    @if (loading) 
    {
        <span class="spinner-border spinner-border-sm mr-1"></span>
    }
    Log In
</a>


@code {
    private User model = new User();
    private User user = new User();

    bool loading = false;

    // logs a user in.
    // 
    private async Task Authenticate()
    {
        loading = true;

        // check if user exists in database
        string query = "SELECT * FROM users WHERE (email, password) = (SELECT '" + model.email + "','" + model.password + "') LIMIT 1";

        List<User> foundUsers = await SqlLoadData<User>(query);

        if (foundUsers.Count() < 1)       // if no users were found gives an alert
        {
            await js.InvokeVoidAsync("alert", "Incorrect login details. Please try again.");
            loading = false;
            return;
        }
        user = foundUsers.First();

        // update the session
        var customAuthStateProvider = (CustomAuthenticationStateProvider)authStateProvider;
        await customAuthStateProvider.UpdateAuthenticationState(new UserSession
        {
            Name = user.name,
            Role = user.role
        });
        SetSessionUser(user);

        // redirect
        switch(user.role)
        {
            case "administrator":
                navManager.NavigateTo("/", true);
                break;
            default:
                navManager.NavigateTo("/", true);
                break;
        }
    }

    public void SetSessionUser(User user)
    {
        var useraccount = new UserAccount();
        useraccount.Id = user.id;
        useraccount.UserName = user.name;
        useraccount.Password = user.lastname;
        useraccount.Role = user.role;

        _currentSession.SetItemAsync("SessionUser", useraccount);
    }

    public async Task<List<T>> SqlLoadData<T>(string query)
    {
        string connstring = _config.GetConnectionString("default");
        using (IDbConnection connection = new MySqlConnection(connstring))
        {
            var rows = await connection.QueryAsync<T>(query, new { });
            return rows.ToList();
        }
    }
}





