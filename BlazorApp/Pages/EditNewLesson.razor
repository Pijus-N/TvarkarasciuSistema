@page "/editlesson/{myvalue}"
@using BlazorServer.Models
@using BlazorServer.Authentication
@using System.Data
@using MySqlConnector
@using Dapper
@inject IJSRuntime js
@inject IConfiguration _config
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject Blazored.SessionStorage.ISessionStorageService _currentSession
 
<PageTitle>Edit Lesson</PageTitle>
<h1>Edit lesson</h1>
@if (dataLoaded)
{
    <EditForm Model="@model" OnValidSubmit="@EditLesson" OnInvalidSubmit="@InvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary/>
    <div class="form-group">
        <label>Date</label>
        <InputDate disabled="true" @bind-Value="model.start_time" class="form-control" />
    </div>
        <div class="form-group">
        <label>Location</label>
        <InputText @bind-Value="model.location" class="form-control" />
    </div>
    <div class="form-group">
        <label>Instrument</label>
        <InputText @bind-Value="model.instrument" class="form-control" />
    </div>
    <div class="form-group">
        <label>Price</label>
        <InputNumber @bind-Value="model.price" class="form-control" />
    </div>
    <div class="form-group">
        <label>Student count</label>
        <InputNumber @bind-Value="model.student_count" class="form-control" />
    </div>
    <div>
        <label>Lesson type</label>
        <InputSelect @bind-Value="model.lesson_type" class="form-select" required="required">
            <option value="">Select a lesson type</option>
            <option value="Live">Live</option>
            <option value="Online">Online</option>

        </InputSelect>
    </div><br>
    <button disabled="@loading" class="btn btn-primary" type="submit">
        @if (loading) 
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Edit
    </button>
        <button disabled="@loading" class="btn btn-danger" type="button" @onclick="DeleteLesson">
        @if (loading) 
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Delete
    </button>
    </EditForm>
            
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}



@code {
    [Parameter]
    public string myvalue{ get; set; }
    public string lessonDate{ get; set; }
    public string time{ get; set; }
    bool loading = false;

    bool dataLoaded = false;

    private Lesson model = new Lesson();
    public Lesson editableLesson = new Lesson();

    private async Task EditLesson() 
    {
        loading = true;     // silly button effect to show that something is happening

        string sql = "UPDATE lessons SET start_time = @start_time, location = @location, price = @price, instrument = @instrument, student_count = @student_count, lesson_type = @lesson_type WHERE id = @id";
        string connstring = _config.GetConnectionString("default");
        using (IDbConnection connection = new MySqlConnection(connstring))
        {
            await connection.ExecuteAsync(sql, new { 
                start_time = model.start_time, 
                location = model.location, 
                price = model.price, 
                instrument = model.instrument, 
                student_count = model.student_count, 
                lesson_type = model.lesson_type, 
                id = @myvalue });
        }

        loading = false;
        await js.InvokeVoidAsync("alert", "Lesson updated.");
        navManager.NavigateTo("/TimeTable/show", true);
    }
    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();

        //the param will be set now
        var test = myvalue;

        await ReadDbData(myvalue);
    }

    private async Task InvalidSubmit()
    {
        await js.InvokeVoidAsync("alert", "Incorrect data. Please try again.");
    }

    protected override void OnInitialized()
    {
        // Console.WriteLine(myvalue);
        //await ReadDbData();          
    }

    async Task ReadDbData(string id)
    {      
        // check if user exists in database
        string sql = "select * from lessons where id=@id";
        
        // this thing should be a function somewhere
        string connstring = _config.GetConnectionString("default");
        using (IDbConnection connection = new MySqlConnection(connstring))
        {
            var rows = await connection.QueryAsync<Lesson>(sql,new { id });
            rows = rows.ToList();
                
            foreach(var row in rows){
                Lesson Lesson = row;
                //Console.WriteLine("Data");
                //Console.WriteLine(Lesson.date);
                //Console.WriteLine(DateTime.Parse(Lesson.date.Split(' ')[0]));

                //allLessons.Add(Lesson);

                editableLesson = Lesson;
                model=Lesson;

            }                             
        }        
        dataLoaded = true;
    }

    private async Task DeleteLesson()
{
    loading = true;
    
    string sql = "DELETE FROM lessons WHERE id = @id";
    string connstring = _config.GetConnectionString("default");
    using (IDbConnection connection = new MySqlConnection(connstring))
    {
        await connection.ExecuteAsync(sql, new { id = myvalue });
    }

    loading = false;
    await js.InvokeVoidAsync("alert", "Lesson deleted");
    navManager.NavigateTo("/counter/show", true);
}

}