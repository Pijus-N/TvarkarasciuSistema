@page "/editlesson/{myvalue}"
@using BlazorServer.Models
@using BlazorServer.Authentication
@using System.Data
@using MySqlConnector
@using Dapper
@inject IJSRuntime js
@inject IConfiguration _config
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject Blazored.SessionStorage.ISessionStorageService _currentSession
@using DataAccessLibrary
@inject ISQLDataAccess _data
 
<PageTitle>Pamokos redagavimas</PageTitle>
<h1>Pamokos redagavimas</h1>
@if (dataLoaded)
{
    <EditForm Model="@model" OnValidSubmit="@EditLesson" OnInvalidSubmit="@InvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary/>
    <div class="form-group">
        <label>Data</label>
        <InputDate disabled="true" @bind-Value="model.pamokos_pradzia" class="form-control" />
    </div>
        <div class="form-group">
        <label>Vieta</label>
        <InputText @bind-Value="model.vietove" class="form-control" />
    </div>
    <div class="form-group">
        <label>Instrumentas</label>
        <InputText @bind-Value="model.instrumentas" class="form-control" />
    </div>
    <div class="form-group">
        <label>Kaina</label>
        <InputNumber @bind-Value="model.kaina" class="form-control" />
    </div>
    <div class="form-group">
        <label>Mokiniu skaičius</label>
        <InputNumber @bind-Value="model.mokiniu_skaicius" class="form-control" />
    </div>
    <div>
        <label>Pamokos tipas</label>
        <InputSelect @bind-Value="model.pamokos_tipas" class="form-select" required="required">
            <option value="">Pasirinkite pamokos tipą</option>
            <option value="Gyva">Gyva</option>
            <option value="Nuotolinė">Nuotolinė</option>

        </InputSelect>
    </div><br>
    <button disabled="@loading" class="btn btn-primary" type="submit">
        @if (loading) 
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Atnaujinti
    </button>
        <button disabled="@loading" class="btn btn-danger" type="button" @onclick="DeleteLesson">
        @if (loading) 
        {
            <span class="spinner-border spinner-border-sm mr-1"></span>
        }
        Ištrinti
    </button>
    </EditForm>
            
}
else
{
    <div class="spinner-border" role="status">
        <span class="sr-only">Loading...</span>
    </div>
}



@code {
    [Parameter]
    public string myvalue{ get; set; }
    public string lessonDate{ get; set; }
    public string time{ get; set; }
    bool loading = false;

    bool dataLoaded = false;

    private Pamoka model = new Pamoka();
    public Pamoka editableLesson = new Pamoka();

    private async Task EditLesson() 
    {
        loading = true;     // silly button effect to show that something is happening

       string sql = "UPDATE pamokos SET pamokos_pradzia = @pamokos_pradzia, vietove = @vietove, kaina = @kaina, instrumentas = @instrumentas, mokiniu_skaicius = @mokiniu_skaicius, pamokos_tipas = @pamokos_tipas WHERE id = @id";
        string connstring = _config.GetConnectionString("default");
        using (IDbConnection connection = new MySqlConnection(connstring))
        {
            await connection.ExecuteAsync(sql, new { pamokos_pradzia = model.pamokos_pradzia, vietove = model.vietove, kaina = model.kaina, instrumentas = model.instrumentas, mokiniu_skaicius = model.mokiniu_skaicius, pamokos_tipas = model.pamokos_tipas, id = @myvalue });
        }

        loading = false;
        await js.InvokeVoidAsync("alert", "Pamoka atnaujinta");
        navManager.NavigateTo("/counter/show", true);
    }
    protected override async Task OnParametersSetAsync()
{
    await base.OnParametersSetAsync();


    //the param will be set now
    var test = myvalue;

    await ReadDbData(myvalue);
}

    private async Task InvalidSubmit()
    {
        await js.InvokeVoidAsync("alert", "Neteisingi duomenys!");
    }

  

   protected override void OnInitialized()
        {
           // Console.WriteLine(myvalue);
           //await ReadDbData();
          
        }

        async Task ReadDbData(string id)
    {
        

        // check if user exists in database
        string sql = "select * from pamokos where id=@id";
        
        // this thing should be a function somewhere
        string connstring = _config.GetConnectionString("default");
            using (IDbConnection connection = new MySqlConnection(connstring))
            {
                var rows = await connection.QueryAsync<Pamoka>(sql,new { id });
                rows = rows.ToList();
                
                foreach(var row in rows){
                    Pamoka pamoka = row;
                    //Console.WriteLine("Data");
                    //Console.WriteLine(pamoka.date);
                    //Console.WriteLine(DateTime.Parse(pamoka.date.Split(' ')[0]));

                    //allLessons.Add(pamoka);

                    editableLesson = pamoka;
                    model=pamoka;

                }
                
                

                
            }
        
        dataLoaded = true;

    }

    private async Task DeleteLesson()
{
    loading = true;
    
    string sql = "DELETE FROM pamokos WHERE id = @id";
    string connstring = _config.GetConnectionString("default");
    using (IDbConnection connection = new MySqlConnection(connstring))
    {
        await connection.ExecuteAsync(sql, new { id = myvalue });
    }

    loading = false;
    await js.InvokeVoidAsync("alert", "Pamoka ištrinta");
    navManager.NavigateTo("/counter", true);
}

}