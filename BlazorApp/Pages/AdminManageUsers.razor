@page "/admin/manage_users"
@using BlazorServer.Models
@using MySqlConnector
@using Dapper
@using System.Data
@inject IConfiguration _config
@inject IJSRuntime js
@inject NavigationManager navManager

<PageTitle>Admin</PageTitle>
<h1>Manage Users</h1>

<a class="btn btn-primary" href="admin" role="button">Back</a>
@deleted_id @deleted_name

@if (users == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th scope="col">#</th>
                <th scope="col">ID</th>
                <th scope="col">Email</th>
                <th scope="col">Name</th>
                <th scope="col">Role</th>
                <th scope="col"></th>
                <th scope="col"></th>
            </tr>
        </thead>
        <tbody>
        @{ int i = 1; }
        @foreach (User user in users)
        {
            
            <tr>
                <th scope="row">@i</th>
                <td>@user.id</td>
                <td>@user.email</td>
                <td>@user.name @user.lastname</td>
                <td>@user.role</td>
                <td>
                    <a class="btn btn-primary" role="button" href="admin/manage_users/@user.id" disabled="@loading">Edit</a>
                </td>
                <td>
                     <a class="btn btn-danger" role="button" @onclick="() => DeleteUser(user.id)" disabled="@loading">Delete</a>
                </td>
            </tr>
            i++;
        }
        </tbody>    
    </table>
}
<a class="btn btn-primary" href="admin" role="button">Back</a>

@code {
    List<User> users = new List<User>();
    int deleted_id = 0;
    string deleted_name = "";
    public bool loading = false;

    protected override async Task OnInitializedAsync()
    {
        string query = "select * from users";

        users = await SqlLoadData<User>(query);
    }

    public async Task SqlSaveData(string query)
    {
        string connstring = _config.GetConnectionString("default");
        using (IDbConnection connection = new MySqlConnection(connstring))
        {
            await connection.ExecuteAsync(query, new { });
        }
    }

    public async Task<List<T>> SqlLoadData<T>(string query)
    {
        string connstring = _config.GetConnectionString("default");
        using (IDbConnection connection = new MySqlConnection(connstring))
        {
            var rows = await connection.QueryAsync<T>(query, new { });
            return rows.ToList();
        }
    }

    public async Task DeleteUser(int id)
    {
        bool confirmed = await js.InvokeAsync<bool>("confirm", "Are you sure?");
        if (confirmed)
        {
            deleted_id = id;

            string query = "select * from users where (id) = (SELECT '" + id + "') LIMIT 1";

            List<User> deleted_user = await SqlLoadData<User>(query);

            switch (deleted_user.First().role)
            {
                case "teacher":
                    query = "delete from teachers where (user_id) = (SELECT '" + id + "')";
                    await SqlSaveData(query);
                    query = "delete from users where (id) = (SELECT '" + id + "')";
                    await SqlSaveData(query);
                    navManager.NavigateTo("admin/manage_users");
                    break;
                case "guardian":
                    break;

            }
        }
        else
        {
            // User clicked "No" or closed the dialog
            // Handle the alternative action or do nothing
        }
        
    }
}