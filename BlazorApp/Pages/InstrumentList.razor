@page "/listinstruments"
@using BlazorServer.Models
@using BlazorServer.Authentication
@using System.Data
@using MySqlConnector
@using Dapper
@inject IJSRuntime js
@inject IConfiguration _config
@inject NavigationManager navManager
@inject AuthenticationStateProvider authStateProvider
@inject Blazored.SessionStorage.ISessionStorageService _currentSession

 
<PageTitle>Instruments</PageTitle>


<h3>Rented instruments</h3>
<table class="table">
    <tr>
        <th>Name</th>
        <th>Description</th>
        <th>Price</th>
        <th>Type</th>
        <th>State</th>
    </tr>
    @foreach (var instrument in rentedInstruments)
    {
        <tr>
            <td>@instrument.name</td>
            <td>@instrument.description</td>
            <td>@instrument.rental_price</td>
            <td>@instrument.instrument_type</td>
            <td>@instrument.instrument_state</td>
            <td><button class="btn btn-danger" type="button" @onclick="() => Cancel(instrument.id)">Cancel</button></td>
        </tr>
    }

</table>
<h3>Available instruments</h3>
<table class="table">

    <tr>
        <th>Name</th>
        <th>Description</th>
        <th>Price</th>
        <th>Type</th>
        <th>State</th>
    </tr>

    @foreach (var instrument in allInstruments)
    {
        if (instrument.instrument_state == "Available")
        {
            <tr>
                <td>@instrument.name</td>
                <td>@instrument.description</td>
                <td>@instrument.rental_price</td>
                <td>@instrument.instrument_type</td>
                <td>@instrument.instrument_state</td>
                <td><button class="btn btn-warning" type="button" @onclick="() => Rent(instrument.id)">Rent</button></td>
            </tr>
        }

    }

</table>


@code
{
    public UserAccount user = new UserAccount();

    private List<Instrument> allInstruments = new List<Instrument>();
    private List<Instrument> rentedInstruments = new List<Instrument>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            await GetSessionUser();
            await ReadDbData();
        }
        catch
        {
            // Ignore
        }
    }

    async Task Cancel(int instrument_id)
    {

        string connstring = _config.GetConnectionString("default");

        using (MySqlConnection connection = new MySqlConnection(connstring))
        {

            connection.Open();

            string query = "UPDATE `instruments` SET instrument_state = 'Available' WHERE instruments.id = @instrument";

            using (MySqlCommand command = new MySqlCommand(query, connection))
            {

                command.Parameters.AddWithValue("@instrument", instrument_id);

                int rowsAffected = command.ExecuteNonQuery();
            }

        }

        await js.InvokeVoidAsync("alert", "Order complete");
        navManager.NavigateTo("/listinstruments", true);

    }

    async Task Rent(int instrument_id)
    {
        int user_id = user.Id;
        string connstring = _config.GetConnectionString("default");

        using (MySqlConnection connection = new MySqlConnection(connstring))
        {

            connection.Open();

            string query = "UPDATE `instruments` SET instrument_state = 'Reserved', renter_id = @renter WHERE instruments.id = @instrument";

            using (MySqlCommand command = new MySqlCommand(query, connection))
            {
                command.Parameters.AddWithValue("@renter", user_id);
                command.Parameters.AddWithValue("@instrument", instrument_id);

                int rowsAffected = command.ExecuteNonQuery();
            }

        }

        await js.InvokeVoidAsync("alert", "Order complete");
        navManager.NavigateTo("/listinstruments", true);
    }


    async Task ReadDbData()
    {

        int user_id = user.Id;
        string connstring = _config.GetConnectionString("default");

        using (MySqlConnection connection = new MySqlConnection(connstring))
        {
            string query = "SELECT * FROM instruments";
            var rows = await connection.QueryAsync<Instrument>(query);
            //rows = rows.ToList();

            foreach (var row in rows)
            {
                Instrument instrument = row;

                if (instrument.renter_id == user_id && instrument.instrument_state == "Reserved")
                {
                    rentedInstruments.Add(instrument);
                }
                allInstruments.Add(instrument);

            }

        }
    }
    public async Task GetSessionUser()
    {



        try
        {
            user = await _currentSession.GetItemAsync<UserAccount>("SessionUser");
        }
        catch (JSDisconnectedException ex)
        {
            // Ignore
        }

    }
    }